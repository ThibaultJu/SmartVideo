//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmartVideoWpf.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFilms", ReplyAction="http://tempuri.org/IService1/GetFilmsResponse")]
        FilmDTOLibrary.FilmDTO[] GetFilms(int debut, int nb);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFilms", ReplyAction="http://tempuri.org/IService1/GetFilmsResponse")]
        System.Threading.Tasks.Task<FilmDTOLibrary.FilmDTO[]> GetFilmsAsync(int debut, int nb);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGenreWithId", ReplyAction="http://tempuri.org/IService1/GetGenreWithIdResponse")]
        FilmDTOLibrary.GenreDTO[] GetGenreWithId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetGenreWithId", ReplyAction="http://tempuri.org/IService1/GetGenreWithIdResponse")]
        System.Threading.Tasks.Task<FilmDTOLibrary.GenreDTO[]> GetGenreWithIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetActorWithId", ReplyAction="http://tempuri.org/IService1/GetActorWithIdResponse")]
        FilmDTOLibrary.ActeurDTO[] GetActorWithId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetActorWithId", ReplyAction="http://tempuri.org/IService1/GetActorWithIdResponse")]
        System.Threading.Tasks.Task<FilmDTOLibrary.ActeurDTO[]> GetActorWithIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDirectorWithId", ReplyAction="http://tempuri.org/IService1/GetDirectorWithIdResponse")]
        FilmDTOLibrary.RealisateurDTO[] GetDirectorWithId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDirectorWithId", ReplyAction="http://tempuri.org/IService1/GetDirectorWithIdResponse")]
        System.Threading.Tasks.Task<FilmDTOLibrary.RealisateurDTO[]> GetDirectorWithIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFilmWithId", ReplyAction="http://tempuri.org/IService1/GetFilmWithIdResponse")]
        FilmDTOLibrary.FilmDTO[] GetFilmWithId(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFilmWithId", ReplyAction="http://tempuri.org/IService1/GetFilmWithIdResponse")]
        System.Threading.Tasks.Task<FilmDTOLibrary.FilmDTO[]> GetFilmWithIdAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : SmartVideoWpf.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<SmartVideoWpf.ServiceReference1.IService1>, SmartVideoWpf.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public FilmDTOLibrary.FilmDTO[] GetFilms(int debut, int nb) {
            return base.Channel.GetFilms(debut, nb);
        }
        
        public System.Threading.Tasks.Task<FilmDTOLibrary.FilmDTO[]> GetFilmsAsync(int debut, int nb) {
            return base.Channel.GetFilmsAsync(debut, nb);
        }
        
        public FilmDTOLibrary.GenreDTO[] GetGenreWithId(int id) {
            return base.Channel.GetGenreWithId(id);
        }
        
        public System.Threading.Tasks.Task<FilmDTOLibrary.GenreDTO[]> GetGenreWithIdAsync(int id) {
            return base.Channel.GetGenreWithIdAsync(id);
        }
        
        public FilmDTOLibrary.ActeurDTO[] GetActorWithId(int id) {
            return base.Channel.GetActorWithId(id);
        }
        
        public System.Threading.Tasks.Task<FilmDTOLibrary.ActeurDTO[]> GetActorWithIdAsync(int id) {
            return base.Channel.GetActorWithIdAsync(id);
        }
        
        public FilmDTOLibrary.RealisateurDTO[] GetDirectorWithId(int id) {
            return base.Channel.GetDirectorWithId(id);
        }
        
        public System.Threading.Tasks.Task<FilmDTOLibrary.RealisateurDTO[]> GetDirectorWithIdAsync(int id) {
            return base.Channel.GetDirectorWithIdAsync(id);
        }
        
        public FilmDTOLibrary.FilmDTO[] GetFilmWithId(int id) {
            return base.Channel.GetFilmWithId(id);
        }
        
        public System.Threading.Tasks.Task<FilmDTOLibrary.FilmDTO[]> GetFilmWithIdAsync(int id) {
            return base.Channel.GetFilmWithIdAsync(id);
        }
    }
}
