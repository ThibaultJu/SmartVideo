#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DALSmartVideoDB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SmartVideoDB")]
	public partial class DalSmartVideoDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertStatistique(Statistique instance);
    partial void UpdateStatistique(Statistique instance);
    partial void DeleteStatistique(Statistique instance);
    partial void InsertUtilisateur(Utilisateur instance);
    partial void UpdateUtilisateur(Utilisateur instance);
    partial void DeleteUtilisateur(Utilisateur instance);
    partial void InsertLocationsFilm(LocationsFilm instance);
    partial void UpdateLocationsFilm(LocationsFilm instance);
    partial void DeleteLocationsFilm(LocationsFilm instance);
    partial void InsertHit(Hit instance);
    partial void UpdateHit(Hit instance);
    partial void DeleteHit(Hit instance);
    #endregion
		
		public DalSmartVideoDBDataContext() : 
				base(global::DALSmartVideoDB.Properties.Settings.Default.SmartVideoDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DalSmartVideoDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DalSmartVideoDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DalSmartVideoDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DalSmartVideoDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Statistique> Statistiques
		{
			get
			{
				return this.GetTable<Statistique>();
			}
		}
		
		public System.Data.Linq.Table<Utilisateur> Utilisateurs
		{
			get
			{
				return this.GetTable<Utilisateur>();
			}
		}
		
		public System.Data.Linq.Table<LocationsFilm> LocationsFilms
		{
			get
			{
				return this.GetTable<LocationsFilm>();
			}
		}
		
		public System.Data.Linq.Table<Hit> Hits
		{
			get
			{
				return this.GetTable<Hit>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Statistiques")]
	public partial class Statistique : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idStatistiques;
		
		private int _idHits;
		
		private System.DateTime _date;
		
		private int _numClassement;
		
		private EntityRef<Hit> _Hit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidStatistiquesChanging(int value);
    partial void OnidStatistiquesChanged();
    partial void OnidHitsChanging(int value);
    partial void OnidHitsChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnnumClassementChanging(int value);
    partial void OnnumClassementChanged();
    #endregion
		
		public Statistique()
		{
			this._Hit = default(EntityRef<Hit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idStatistiques", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idStatistiques
		{
			get
			{
				return this._idStatistiques;
			}
			set
			{
				if ((this._idStatistiques != value))
				{
					this.OnidStatistiquesChanging(value);
					this.SendPropertyChanging();
					this._idStatistiques = value;
					this.SendPropertyChanged("idStatistiques");
					this.OnidStatistiquesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idHits", DbType="Int NOT NULL")]
		public int idHits
		{
			get
			{
				return this._idHits;
			}
			set
			{
				if ((this._idHits != value))
				{
					if (this._Hit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidHitsChanging(value);
					this.SendPropertyChanging();
					this._idHits = value;
					this.SendPropertyChanged("idHits");
					this.OnidHitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numClassement", DbType="Int NOT NULL")]
		public int numClassement
		{
			get
			{
				return this._numClassement;
			}
			set
			{
				if ((this._numClassement != value))
				{
					this.OnnumClassementChanging(value);
					this.SendPropertyChanging();
					this._numClassement = value;
					this.SendPropertyChanged("numClassement");
					this.OnnumClassementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hit_Statistique", Storage="_Hit", ThisKey="idHits", OtherKey="idHits", IsForeignKey=true)]
		public Hit Hit
		{
			get
			{
				return this._Hit.Entity;
			}
			set
			{
				Hit previousValue = this._Hit.Entity;
				if (((previousValue != value) 
							|| (this._Hit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Hit.Entity = null;
						previousValue.Statistiques.Remove(this);
					}
					this._Hit.Entity = value;
					if ((value != null))
					{
						value.Statistiques.Add(this);
						this._idHits = value.idHits;
					}
					else
					{
						this._idHits = default(int);
					}
					this.SendPropertyChanged("Hit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Utilisateurs")]
	public partial class Utilisateur : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Email;
		
		private string _Pseudo;
		
		private string _Password;
		
		private string _Carte;
		
		private EntitySet<LocationsFilm> _LocationsFilms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPseudoChanging(string value);
    partial void OnPseudoChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnCarteChanging(string value);
    partial void OnCarteChanged();
    #endregion
		
		public Utilisateur()
		{
			this._LocationsFilms = new EntitySet<LocationsFilm>(new Action<LocationsFilm>(this.attach_LocationsFilms), new Action<LocationsFilm>(this.detach_LocationsFilms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pseudo", DbType="NVarChar(50)")]
		public string Pseudo
		{
			get
			{
				return this._Pseudo;
			}
			set
			{
				if ((this._Pseudo != value))
				{
					this.OnPseudoChanging(value);
					this.SendPropertyChanging();
					this._Pseudo = value;
					this.SendPropertyChanged("Pseudo");
					this.OnPseudoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Carte", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Carte
		{
			get
			{
				return this._Carte;
			}
			set
			{
				if ((this._Carte != value))
				{
					this.OnCarteChanging(value);
					this.SendPropertyChanging();
					this._Carte = value;
					this.SendPropertyChanged("Carte");
					this.OnCarteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Utilisateur_LocationsFilm", Storage="_LocationsFilms", ThisKey="Email", OtherKey="Utilisateur")]
		public EntitySet<LocationsFilm> LocationsFilms
		{
			get
			{
				return this._LocationsFilms;
			}
			set
			{
				this._LocationsFilms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LocationsFilms(LocationsFilm entity)
		{
			this.SendPropertyChanging();
			entity.Utilisateur1 = this;
		}
		
		private void detach_LocationsFilms(LocationsFilm entity)
		{
			this.SendPropertyChanging();
			entity.Utilisateur1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LocationsFilms")]
	public partial class LocationsFilm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idLocationsFilm;
		
		private int _idFilm;
		
		private string _Utilisateur;
		
		private System.DateTime _DateDébut;
		
		private System.DateTime _DateFin;
		
		private EntityRef<Utilisateur> _Utilisateur1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidLocationsFilmChanging(int value);
    partial void OnidLocationsFilmChanged();
    partial void OnidFilmChanging(int value);
    partial void OnidFilmChanged();
    partial void OnUtilisateurChanging(string value);
    partial void OnUtilisateurChanged();
    partial void OnDateDébutChanging(System.DateTime value);
    partial void OnDateDébutChanged();
    partial void OnDateFinChanging(System.DateTime value);
    partial void OnDateFinChanged();
    #endregion
		
		public LocationsFilm()
		{
			this._Utilisateur1 = default(EntityRef<Utilisateur>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idLocationsFilm", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idLocationsFilm
		{
			get
			{
				return this._idLocationsFilm;
			}
			set
			{
				if ((this._idLocationsFilm != value))
				{
					this.OnidLocationsFilmChanging(value);
					this.SendPropertyChanging();
					this._idLocationsFilm = value;
					this.SendPropertyChanged("idLocationsFilm");
					this.OnidLocationsFilmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idFilm", DbType="Int NOT NULL")]
		public int idFilm
		{
			get
			{
				return this._idFilm;
			}
			set
			{
				if ((this._idFilm != value))
				{
					this.OnidFilmChanging(value);
					this.SendPropertyChanging();
					this._idFilm = value;
					this.SendPropertyChanged("idFilm");
					this.OnidFilmChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Utilisateur", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Utilisateur
		{
			get
			{
				return this._Utilisateur;
			}
			set
			{
				if ((this._Utilisateur != value))
				{
					if (this._Utilisateur1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUtilisateurChanging(value);
					this.SendPropertyChanging();
					this._Utilisateur = value;
					this.SendPropertyChanged("Utilisateur");
					this.OnUtilisateurChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDébut", DbType="Date NOT NULL")]
		public System.DateTime DateDébut
		{
			get
			{
				return this._DateDébut;
			}
			set
			{
				if ((this._DateDébut != value))
				{
					this.OnDateDébutChanging(value);
					this.SendPropertyChanging();
					this._DateDébut = value;
					this.SendPropertyChanged("DateDébut");
					this.OnDateDébutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateFin", DbType="Date NOT NULL")]
		public System.DateTime DateFin
		{
			get
			{
				return this._DateFin;
			}
			set
			{
				if ((this._DateFin != value))
				{
					this.OnDateFinChanging(value);
					this.SendPropertyChanging();
					this._DateFin = value;
					this.SendPropertyChanged("DateFin");
					this.OnDateFinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Utilisateur_LocationsFilm", Storage="_Utilisateur1", ThisKey="Utilisateur", OtherKey="Email", IsForeignKey=true)]
		public Utilisateur Utilisateur1
		{
			get
			{
				return this._Utilisateur1.Entity;
			}
			set
			{
				Utilisateur previousValue = this._Utilisateur1.Entity;
				if (((previousValue != value) 
							|| (this._Utilisateur1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Utilisateur1.Entity = null;
						previousValue.LocationsFilms.Remove(this);
					}
					this._Utilisateur1.Entity = value;
					if ((value != null))
					{
						value.LocationsFilms.Add(this);
						this._Utilisateur = value.Email;
					}
					else
					{
						this._Utilisateur = default(string);
					}
					this.SendPropertyChanged("Utilisateur1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Hits")]
	public partial class Hit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idHits;
		
		private System.Nullable<System.DateTime> _date;
		
		private string _type;
		
		private System.Nullable<int> _nbRecherche;
		
		private int _idRequete;
		
		private EntitySet<Statistique> _Statistiques;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidHitsChanging(int value);
    partial void OnidHitsChanged();
    partial void OndateChanging(System.Nullable<System.DateTime> value);
    partial void OndateChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OnnbRechercheChanging(System.Nullable<int> value);
    partial void OnnbRechercheChanged();
    partial void OnidRequeteChanging(int value);
    partial void OnidRequeteChanged();
    #endregion
		
		public Hit()
		{
			this._Statistiques = new EntitySet<Statistique>(new Action<Statistique>(this.attach_Statistiques), new Action<Statistique>(this.detach_Statistiques));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idHits", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idHits
		{
			get
			{
				return this._idHits;
			}
			set
			{
				if ((this._idHits != value))
				{
					this.OnidHitsChanging(value);
					this.SendPropertyChanging();
					this._idHits = value;
					this.SendPropertyChanged("idHits");
					this.OnidHitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="Date")]
		public System.Nullable<System.DateTime> date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="NChar(10)")]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nbRecherche", DbType="Int")]
		public System.Nullable<int> nbRecherche
		{
			get
			{
				return this._nbRecherche;
			}
			set
			{
				if ((this._nbRecherche != value))
				{
					this.OnnbRechercheChanging(value);
					this.SendPropertyChanging();
					this._nbRecherche = value;
					this.SendPropertyChanged("nbRecherche");
					this.OnnbRechercheChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idRequete", DbType="Int NOT NULL")]
		public int idRequete
		{
			get
			{
				return this._idRequete;
			}
			set
			{
				if ((this._idRequete != value))
				{
					this.OnidRequeteChanging(value);
					this.SendPropertyChanging();
					this._idRequete = value;
					this.SendPropertyChanged("idRequete");
					this.OnidRequeteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Hit_Statistique", Storage="_Statistiques", ThisKey="idHits", OtherKey="idHits")]
		public EntitySet<Statistique> Statistiques
		{
			get
			{
				return this._Statistiques;
			}
			set
			{
				this._Statistiques.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Statistiques(Statistique entity)
		{
			this.SendPropertyChanging();
			entity.Hit = this;
		}
		
		private void detach_Statistiques(Statistique entity)
		{
			this.SendPropertyChanging();
			entity.Hit = null;
		}
	}
}
#pragma warning restore 1591
